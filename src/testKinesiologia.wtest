import pacientes.*
import aparatos.*
import centro.*

describe "test del código Etapa 1" {
	const leonardo = new Paciente(edad=40,fortalezaMuscular=20,nivelDeDolor=10)
	const milena = new Paciente(edad=3,fortalezaMuscular=50,nivelDeDolor=30)
	const magneto1 = new Magneto()
	const bici1 = new Bici()
	const minitramp1 = new Minitramp()
	
	test "Leonardo puede usar el magneto1" {
		assert.that(leonardo.puedeUsar(magneto1))
	}

	test "Leonardo puede usar bici1" {
		assert.that(leonardo.puedeUsar(bici1))
	}

	test "Leonardo puede usar minitramp1" {
		assert.that(leonardo.puedeUsar(minitramp1))
	}
	
	test "Milena puede usar el magneto1" {
		assert.that(milena.puedeUsar(magneto1))
	}

	test "Milena no puede usar bici1" {
		assert.notThat(milena.puedeUsar(bici1))
	}

	test "Milena no puede usar minitramp1" {
		assert.notThat(milena.puedeUsar(minitramp1))
	}	
	
	test "Después de usar el magneto una vez, el nivel de dolor de Leonardo baja a 9." {
		leonardo.usarAparato(magneto1)
		assert.equals(9,leonardo.nivelDeDolor())
	}

	test "Después de usar el magneto una vez, el nivel de dolor de Milena baja a 27." {
		milena.usarAparato(magneto1)
		assert.equals(27,milena.nivelDeDolor())
	}

	test "Después de usar la bicicleta una vez, el nivel de dolor de Leonardo baja a 6, " {
		leonardo.usarAparato(bici1)
		assert.equals(6,leonardo.nivelDeDolor())
	}

	test "Después de usar la bicicleta una vez, el nivel de fortaleza de Leonardo sube a 23" {
		leonardo.usarAparato(bici1)
		assert.equals(23,leonardo.fortalezaMuscular())
	}

	test "Después de usar minitramp una vez, el nivel de fortaleza de Leonardo sube a 24" {
		leonardo.usarAparato(minitramp1)
		assert.equals(24,leonardo.fortalezaMuscular())
	}


}

describe "test Etapa 2" {
	const biciLeonardo = new Bici()
	const rutinaLeonardo = [biciLeonardo,new Minitramp(),biciLeonardo,new Magneto()]
	const rutinaMilena = [new Magneto(), new Bici()]
	const leonardo = new Paciente(edad=40,fortalezaMuscular=20,nivelDeDolor=10)
	const milena = new Paciente(edad=3,fortalezaMuscular=50,nivelDeDolor=30)
	
	method initialize() {
		leonardo.asignarRutina(rutinaLeonardo)
		milena.asignarRutina(rutinaMilena)
	}
	
	test "leonardo puede hacer la rutina asignada" {
		assert.that(leonardo.puedeRealizarRutina())
	}
	
	test "leonardo hace la rutina y su nivel de dolor baja a 1.8" {
		leonardo.realizarRutina()
		assert.equals(1.8,leonardo.nivelDeDolor())
	}
	
	test "leonardo hace la rutina y su fortaleza sube a 30" {
		leonardo.realizarRutina()
		assert.equals(30,leonardo.fortalezaMuscular())
	}
	
	test "milena no puede realizar la rutina, arroja excepción" {
		assert.throwsException({milena.realizarRutina()})
	}
	
	test "milena no puede realizar la rutina" {
		assert.notThat(milena.puedeRealizarRutina())
	}
}

describe "test de etapa 3" {
	const biciLeonardo = new Bici()
	const rutinaLeonardo = [biciLeonardo,new Minitramp(),biciLeonardo,new Magneto()]
	const rutinaJulian = [new Bici(color="rojo"), new Magneto(color="verde"), new Bici()]
	const nicolas = new Resistente(edad=40,fortalezaMuscular=20,nivelDeDolor=10,rutina=rutinaLeonardo)
	const victoria =  new Caprichoso(edad=30,fortalezaMuscular=40,nivelDeDolor=10,rutina=rutinaLeonardo)
	const julian =  new Caprichoso(edad=20,fortalezaMuscular=50,nivelDeDolor=54,rutina=rutinaJulian)
	const zoe = new RapidaRecuperacion(edad=50,fortalezaMuscular=40,nivelDeDolor=14,rutina=rutinaLeonardo)
	
	method initialize() {
		coeficienteDeRecuperacion.valor(2)
	}
	
	test "Nicolás puede hacer la rutina que tiene asignada" {
		assert.that(nicolas.puedeRealizarRutina())
	}
	
	test "Nicolas realiza rutina, su nivel de dolor baja a 1.8" {
		nicolas.realizarRutina()
		assert.equals(1.8,nicolas.nivelDeDolor())
	}
	
	test "Nicolas realiza rutina, su fortaleza sube a 34" {
		nicolas.realizarRutina()
		assert.equals(34,nicolas.fortalezaMuscular())
	}
	
	test "Victoria no puede hacer la rutina asignada" {
		assert.notThat(victoria.puedeRealizarRutina())
	}

	test "Julian puede hacer la rutina asignada" {
		assert.that(julian.puedeRealizarRutina())
	}
	
	test "Julian realiza rutina, su nivel de dolor baja a 29.3" {
		julian.realizarRutina()
		assert.equals(29.3,julian.nivelDeDolor())
	}
	
	test "Julian realiza rutina, su fortaleza sube a 62" {
		julian.realizarRutina()
		assert.equals(62,julian.fortalezaMuscular())
	}
	
	test "Zoe puede hacer la rutina asignada" {
		assert.that(zoe.puedeRealizarRutina())
	}
	
	test "Zoe realiza rutina, su nivel de dolor baja a 3.4 con valor de decremento == 2" {
		zoe.realizarRutina()
		assert.equals(3.4,zoe.nivelDeDolor())
	}
	
	test "Zoe realiza rutina, su fortaleza sube a 51" {
		zoe.realizarRutina()
		assert.equals(51,zoe.fortalezaMuscular())
	}
	
}

describe "test del centro de kinesiologia" {
	const biciLeonardo = new Bici()
	const rutinaLeonardo = [biciLeonardo,new Minitramp(),biciLeonardo,new Magneto()]
	const rutinaJulian = [new Bici(color="rojo"), new Magneto(color="verde"), new Bici()]
	const nicolas = new Resistente(edad=40,fortalezaMuscular=20,nivelDeDolor=10,rutina=rutinaLeonardo)
	const victoria =  new Caprichoso(edad=30,fortalezaMuscular=40,nivelDeDolor=10,rutina=rutinaLeonardo)
	const julian =  new Caprichoso(edad=20,fortalezaMuscular=50,nivelDeDolor=54,rutina=rutinaJulian)
	const zoe = new RapidaRecuperacion(edad=50,fortalezaMuscular=40,nivelDeDolor=14,rutina=rutinaLeonardo)
	const rutinaMilena = [rutinaLeonardo.get(3), biciLeonardo]
	const milena = new Paciente(edad=3,fortalezaMuscular=50,nivelDeDolor=30,rutina=rutinaMilena)
	
	method initialize() {
		coeficienteDeRecuperacion.valor(2)
		centro.agregarUnAparato(biciLeonardo)
		centro.agregarUnAparato(rutinaLeonardo.get(1))
		centro.agregarUnAparato(rutinaLeonardo.get(3))
		centro.agregarAparatos(rutinaJulian)
		centro.agregarAparatos(rutinaMilena)
		centro.agregarPacientes(#{nicolas,victoria,julian,zoe,milena})
	}
	
	test "los aparatos son de colores blanco, rojo y verde" {
		assert.equals(#{"blanco","rojo","verde"},centro.coloresDeAparatos())
	}
	
	test "la unica paciente menor a 8 años es milena" {
		assert.equals(#{milena},centro.pacientesMenoresDe8Anios())
	}
	
	test "victoria y milena no pueden hacer la rutina, cantidad 2" {
		assert.equals(2,centro.cantidadPacientesQueNoPuedenHacerRutina())
	}
	
	test "el centro está optimo, no necesita mantenimiento" {
		assert.that(centro.estaOptimo())
	}
	
	test "luego de 750 rutinas, el centro está complicado. Va el tecnico y ya no lo está" {
		(1..750).forEach({i=>nicolas.realizarRutina();julian.realizarRutina()})
		assert.that(centro.estaComplicado())
		centro.visitaTecnico()
		assert.notThat(centro.estaComplicado())
	}
	
}